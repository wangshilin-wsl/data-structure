package integer;
/*      写一个函数，求两个整数之和，
        要求在函数体内不得使用 “+”、“-”、“*”、“/”
        四则运算符号。

        示例:
        输入: a = 1, b = 1
        输出: 2
        思路：
        如果是十进制的话，我们是如何完成加法计算的？

15 + 12 = ？
个位数和十位数的数字分别相加先不管进位的问题，
2 + 5 = 7；
1 + 1 = 2；
所以得到结果 27。

计算产生进位的数字 这里有进位吗？没有，那么就是0
把上面两步的结果进行相加：27 + 0 = 27；
99 + 111 = ？
个、十、百位 的数字分别相加先不管进位的问题：
个位：9 + 1 = 0
十位：9 + 1 = 0
百位：0 + 1 = 1
得到临时结果：100

计算进位的数字：
1 + 9 = 10;
10 + 90 = 100;
得到进位结果：110

相加得到结果
100 + 110 = 210
如何用二进制完成以上的步骤？
问题1： 二进制的加法利用以上的步骤可以得到正确的结果吗？
12 二进制：1100
15 二进制：1111

各位置上的数字分别相加先不管进位的问题：
1100 + 1111 = 0011
得到临时二进制结果：0011

计算进位的数字：
0100 + 0100 = 1000
1000 + 1000= 10000
得到进位结果：11000

相加得到结果
0011 + 11000 = 11011（十进制：27）
就目前来看，是可以的。

问题2：第一步骤不用加法如何得到相同结果？异或
异或：相同为0，相异为1

1100 ^ 1111 = 0011

问题3：第二步骤不用加法如何得到相同结果？相与，左移一位
如果一个位置上的数字相遇能得到1 ，那么表示，位置上的数字都是1，然后在往左移动一位，就是步骤二 进位得到的结果

(1100 & 1111) << 1 = 11000

        */
public class Add {
    public static void main(String[] args) {
        System.out.println(add(4,5));
    }
    public static int add(int a, int b) {
        if(b==0) return a;
        return add(a^b,(a&b)<<1);
    }
}
